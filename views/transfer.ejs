<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transfer Inventory</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Simple background color to distinguish this page */
        body { background-color: #eef; }
        .location-qty { font-size: 0.9em; margin-right: 10px; }
        .location-1 { color: #007bff; } /* Blue for Office */
        .location-2 { color: #fd7e14; } /* Orange for Derek's */
        .location-3 { color: #28a745; } /* Green for House */
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="/inventory">Inventory App</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto mb-2 mb-lg-0 align-items-lg-center">
                    <% if (currentUserLocation && allLocations && allLocations.length > 0) { %>
                    <li class="nav-item dropdown me-lg-2 mb-2 mb-lg-0">
                        <a class="nav-link dropdown-toggle btn btn-outline-light btn-sm" href="#" role="button" id="locationDropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false" data-current-location-id="<%= currentUserLocation.id %>">
                            <i class="bi bi-geo-alt-fill"></i> <%= currentUserLocation.name %>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="locationDropdownMenuLink" id="locationSelectorDropdown">
                            <% allLocations.forEach(location => { %>
                                <li><a class="dropdown-item <% if (location.id === currentUserLocation.id) { %>active<% } %>" href="#" data-location-id="<%= location.id %>"><%= location.name %></a></li>
                            <% }); %>
                        </ul>
                    </li>
                    <% } %>
                    <li class="nav-item"><a class="nav-link <% if (page === 'inventory') { %>active<% } %>" href="/inventory">Inventory Adjust</a></li>
                    <% if (isAdmin) { %>
                        <li class="nav-item"><a class="nav-link <% if (page === 'admin') { %>active<% } %>" href="/admin">Admin Panel</a></li>
                         <li class="nav-item"><a class="nav-link <% if (page === 'logs') { %>active<% } %>" href="/admin/logs">View Logs</a></li>
                    <% } %>
                     <li class="nav-item"><a class="nav-link <% if (page === 'transfer') { %>active<% } %>" href="/transfer">Transfer Inventory</a></li>
                    <li class="nav-item"><a class="nav-link <% if (page === 'settings') { %>active<% } %>" href="/user/settings">My Account</a></li>
                    <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <h1 class="text-center mb-4">Transfer Inventory Between Locations</h1>

         <% if (success && success.length > 0) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        <% if (error && error.length > 0) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <div class="card shadow-sm mb-4">
            <div class="card-header">
                Perform Transfer
            </div>
            <div class="card-body">
                <form action="/transfer" method="POST" id="transferForm" class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label for="productId" class="form-label">Product</label>
                        <select class="form-select" id="productId" name="productId" required>
                            <option value="" selected disabled>Select product...</option>
                            <% products.forEach(product => { %>
                                <% if(product.totalQuantity > 0) { %> <%# Only list products with stock %>
                                    <option value="<%= product.id %>" data-locations="<%= JSON.stringify(product.locations) %>">
                                        <%= product.name %> (Total: <%= product.totalQuantity %>)
                                    </option>
                                <% } %>
                            <% }); %>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" min="1" required>
                    </div>
                    <div class="col-md-2">
                         <label for="fromLocationId" class="form-label">From Location</label>
                        <select class="form-select" id="fromLocationId" name="fromLocationId" required>
                            <option value="" selected disabled>Select source...</option>
                            <% allLocations.forEach(location => { %>
                                <option value="<%= location.id %>"><%= location.name %> (Avail: <span class="avail-qty-from">0</span>)</option>
                            <% }); %>
                        </select>
                    </div>
                     <div class="col-md-2">
                         <label for="toLocationId" class="form-label">To Location</label>
                        <select class="form-select" id="toLocationId" name="toLocationId" required>
                             <option value="" selected disabled>Select destination...</option>
                             <% allLocations.forEach(location => { %>
                                <option value="<%= location.id %>"><%= location.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100">Transfer</button>
                    </div>
                </form>
            </div>
        </div>

        <hr>

        <h2 class="h4 mb-3">Current Location Quantities</h2>
         <div class="table-responsive">
            <table class="table table-sm table-bordered table-striped">
                <thead class="table-light">
                    <tr>
                        <th>Product Name</th>
                         <% allLocations.forEach(location => { %>
                            <th class="text-end"><%= location.name %></th>
                        <% }); %>
                        <th class="text-end fw-bold">Total</th>
                    </tr>
                </thead>
                <tbody>
                     <% products.forEach(product => { %>
                        <tr>
                            <td><%= product.name %></td>
                             <% allLocations.forEach(location => { %>
                                <% const locData = product.locations[location.id] || { quantity: 0 }; %>
                                <td class="text-end location-<%= location.id %>"><%= locData.quantity %></td>
                             <% }); %>
                             <td class="text-end fw-bold"><%= product.totalQuantity %></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>


    </div> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="/js/locationSwitcher.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const productSelect = document.getElementById('productId');
            const fromLocationSelect = document.getElementById('fromLocationId');

            function updateAvailableQuantities() {
                const selectedOption = productSelect.options[productSelect.selectedIndex];
                if (!selectedOption || !selectedOption.value) {
                    // Reset quantities if no product selected
                     Array.from(fromLocationSelect.options).forEach(opt => {
                        const span = opt.querySelector('.avail-qty-from');
                        if (span) span.textContent = '0';
                    });
                    return;
                }

                try {
                    const locationsData = JSON.parse(selectedOption.getAttribute('data-locations') || '{}');

                    // Update the "Available" quantity in the "From Location" dropdown
                    Array.from(fromLocationSelect.options).forEach(opt => {
                        if (opt.value) { // Skip placeholder
                            const locId = opt.value;
                            const availQty = locationsData[locId]?.quantity || 0;
                            const span = opt.querySelector('.avail-qty-from');
                            if (span) span.textContent = availQty;
                        }
                    });
                 } catch (e) {
                    console.error("Error parsing location data:", e);
                     Array.from(fromLocationSelect.options).forEach(opt => {
                        const span = opt.querySelector('.avail-qty-from');
                        if (span) span.textContent = 'Err';
                    });
                 }
            }

            if (productSelect && fromLocationSelect) {
                productSelect.addEventListener('change', updateAvailableQuantities);
                // Initial update on page load
                updateAvailableQuantities();
            }

            // Simple validation to prevent transferring negative or more than available (client-side)
             const transferForm = document.getElementById('transferForm');
             const quantityInput = document.getElementById('quantity');

             if(transferForm && quantityInput && fromLocationSelect){
                 transferForm.addEventListener('submit', (event) => {
                     const selectedFromOption = fromLocationSelect.options[fromLocationSelect.selectedIndex];
                     const quantityToTransfer = parseInt(quantityInput.value, 10);

                     if(selectedFromOption && selectedFromOption.value && !isNaN(quantityToTransfer)){
                         const availableSpan = selectedFromOption.querySelector('.avail-qty-from');
                         const availableQty = availableSpan ? parseInt(availableSpan.textContent, 10) : 0;

                         if(isNaN(availableQty)){
                             console.warn("Could not read available quantity for validation.");
                             return; // Allow submission if reading fails
                         }

                         if(quantityToTransfer > availableQty){
                            alert(`Cannot transfer ${quantityToTransfer}. Only ${availableQty} available at ${selectedFromOption.text.split('(')[0].trim()}.`);
                            event.preventDefault(); // Stop form submission
                         }
                         if (quantityToTransfer <= 0) {
                             alert('Transfer quantity must be greater than zero.');
                             event.preventDefault(); // Stop form submission
                         }
                         if (fromLocationSelect.value === document.getElementById('toLocationId').value) {
                             alert('Source and destination locations cannot be the same.');
                             event.preventDefault();
                         }
                     } else if (isNaN(quantityToTransfer) || quantityToTransfer <=0){
                          alert('Please enter a valid positive quantity to transfer.');
                          event.preventDefault();
                     }
                 });
             }

        });
    </script>
</body>
</html>